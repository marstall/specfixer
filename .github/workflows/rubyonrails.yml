# Optimized Ruby on Rails CI workflow
# Key optimizations:
# 1. Shared setup job to avoid duplicate Ruby/Rails environment setup
# 2. Cache test results and artifacts between jobs
# 3. Conditional job execution to skip unnecessary work
# 4. Streamlined AI analysis with better error handling

name: "Ruby on Rails CI (Optimized)"
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # Shared setup job to prepare environment once
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-info.outputs.cache-key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-info
        run: |
          CACHE_KEY="rails-env-${{ runner.os }}-${{ hashFiles('**/Gemfile.lock') }}-${{ hashFiles('**/package-lock.json') }}"
          echo "cache-key=${CACHE_KEY}" >> $GITHUB_OUTPUT

      - name: Install Ruby and gems
        uses: ruby/setup-ruby@78c01b705fd9d5ad960d432d3a0cfa341d50e410
        with:
          ruby-version: '3.3.1'
          bundler-cache: true

      - name: Cache Rails environment
        uses: actions/cache@v3
        with:
          path: |
            vendor/bundle
            node_modules
            tmp/cache
          key: ${{ steps.cache-info.outputs.cache-key }}
          restore-keys: |
            rails-env-${{ runner.os }}-

  # Test job - now uses cached environment
  test:
    runs-on: ubuntu-latest
    needs: setup
    env:
      RAILS_ENV: test
    outputs:
      test-result: ${{ steps.test-run.outcome }}
      test-output: ${{ steps.test-run.outputs.test-output }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore cached environment
        uses: actions/cache@v3
        with:
          path: |
            vendor/bundle
            node_modules
            tmp/cache
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install Ruby (lightweight - gems already cached)
        uses: ruby/setup-ruby@78c01b705fd9d5ad960d432d3a0cfa341d50e410
        with:
          ruby-version: '3.3.1'
          bundler-cache: true  # Let ruby/setup-ruby handle bundler cache properly

      - name: Set up database schema
        run: bin/rails db:create db:migrate

      - name: Run tests with output capture
        id: test-run
        run: |
          echo "Running tests..."
          if TEST_OUTPUT=$(bin/rake 2>&1); then
            echo "test-output<<EOF" >> $GITHUB_OUTPUT
            echo "TESTS PASSED" >> $GITHUB_OUTPUT
            echo "$TEST_OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "test-output<<EOF" >> $GITHUB_OUTPUT
            echo "TEST FAILURES:" >> $GITHUB_OUTPUT
            echo "$TEST_OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          fi

  # Only run autofix workflow if tests actually failed
  create-branch:
    runs-on: ubuntu-latest
    needs: [test]
    if: failure() && needs.test.result == 'failure'
    outputs:
      branch_name: ${{ steps.branch-info.outputs.branch_name }}
      failure_type: ${{ steps.branch-info.outputs.failure_type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.AUTOFIX_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create branch info
        id: branch-info
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH_NAME="autofix/ai-test-fix-${TIMESTAMP}"
          FAILURE_TYPE="test"
          
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "failure_type=${FAILURE_TYPE}" >> $GITHUB_OUTPUT

      - name: Create autofix branch
        run: |
          git checkout -b ${{ steps.branch-info.outputs.branch_name }}
          git push origin ${{ steps.branch-info.outputs.branch_name }}

  # Streamlined AI fix job - reuses environment and test output
  ai-fix:
    runs-on: ubuntu-latest
    needs: [setup, test, create-branch]
    if: failure() && needs.create-branch.result == 'success'
    outputs:
      has_changes: ${{ steps.ai-analysis.outputs.has_changes }}
    steps:
      - name: Checkout autofix branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-branch.outputs.branch_name }}
          fetch-depth: 0
          token: ${{ secrets.AUTOFIX_TOKEN }}

      - name: Restore cached environment
        uses: actions/cache@v3
        with:
          path: |
            vendor/bundle
            node_modules
            tmp/cache
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install Ruby (lightweight)
        uses: ruby/setup-ruby@78c01b705fd9d5ad960d432d3a0cfa341d50e410
        with:
          ruby-version: '3.3.1'
          bundler-cache: true

      - name: Analyze commit history (optimized)
        id: commit-analysis
        run: |
          # Simplified commit analysis - get last 3 commits only
          COMMITS_JSON=$(git log HEAD~3..HEAD --format='{"sha":"%H","message":"%s","author":"%an"}' | jq -s '.')
          echo "commits_json<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Get consolidated diff for recent commits
          RECENT_DIFF=$(git diff HEAD~3..HEAD)
          echo "recent_diff<<EOF" >> $GITHUB_OUTPUT
          echo "$RECENT_DIFF" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Streamlined AI fix generation
        id: ai-analysis
        uses: actions/github-script@v7
        env:
          RECENT_DIFF: ${{ steps.commit-analysis.outputs.recent_diff }}
          ERROR_OUTPUT: ${{ needs.test.outputs.test-output }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          github-token: ${{ secrets.AUTOFIX_TOKEN }}
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            const recentDiff = process.env.RECENT_DIFF || 'No recent changes';
            const errorOutput = process.env.ERROR_OUTPUT || 'No error output available';
            
            if (!process.env.OPENAI_API_KEY) {
              console.log('ERROR: OPENAI_API_KEY not found');
              core.setOutput('has_changes', 'false');
              return;
            }
            
            // Streamlined prompt focusing on key information
            const prompt = `You are a Rails developer fixing test failures.

            RECENT CHANGES:
            ${recentDiff}

            TEST FAILURES:
            ${errorOutput}

            Provide specific file fixes in this format:
            FILE: path/to/file.rb
            CONTENT:
            [complete corrected file content]

            Focus only on files that need changes to fix the failing tests.`;
            
            try {
              console.log("Starting streamlined AI analysis...");
            
              // Single API call for analysis
              const response = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                  'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  model: 'gpt-3.5-turbo',
                  messages: [
                    {
                      role: 'system',
                      content: 'You are an expert Rails developer. Fix test failures efficiently.'
                    },
                    {
                      role: 'user',
                      content: prompt
                    }
                  ],
                  max_tokens: 2000,
                  temperature: 0.1
                })
              });
            
              if (!response.ok) {
                throw new Error(`API error: ${response.status}`);
              }
            
              const responseData = await response.json();
              let hasChanges = false;
            
              if (responseData?.choices?.[0]?.message?.content) {
                const analysis = responseData.choices[0].message.content.trim();
                console.log("AI analysis received, parsing...");
            
                // Parse and apply fixes
                const sections = analysis.split('FILE:');
            
                for (const section of sections) {
                  if (!section.trim()) continue;
            
                  const lines = section.trim().split('\n');
                  const filePath = lines[0].trim();
            
                  if (!fs.existsSync(filePath)) continue;
            
                  const contentIndex = lines.findIndex(line => line.startsWith('CONTENT:'));
                  if (contentIndex === -1) continue;
            
                  const newContent = lines.slice(contentIndex + 1).join('\n').trim();
            
                  if (newContent && newContent.length > 10) {
                    fs.writeFileSync(filePath, newContent, 'utf8');
                    hasChanges = true;
                    console.log(`Applied fix to ${filePath}`);
                  }
                }
              }
            
              core.setOutput('has_changes', hasChanges.toString());
            
            } catch (error) {
              console.error("AI analysis error:", error.message);
              core.setOutput('has_changes', 'false');
            }

  # Commit and PR creation (unchanged but now more efficient due to upstream optimizations)
  commit-and-pr:
    runs-on: ubuntu-latest
    needs: [test, create-branch, ai-fix]
    if: failure() && needs.ai-fix.result == 'success' && needs.ai-fix.outputs.has_changes == 'true'
    steps:
      - name: Checkout autofix branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-branch.outputs.branch_name }}
          fetch-depth: 0
          token: ${{ secrets.AUTOFIX_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit AI-generated fixes
        run: |
          git add -A
          git commit -m "🤖 AI-generated fixes for test failures (optimized)
          
          Auto-generated by optimized GitHub Actions workflow.
          Changes based on recent commits and test failure analysis."

      - name: Push changes
        run: |
          git push origin ${{ needs.create-branch.outputs.branch_name }}

      - name: Create PR with AI fix details
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.AUTOFIX_TOKEN }}
          script: |
            const title = `🤖 AI Autofix: Resolve test failures (optimized)`;
            
            const body = `## 🤖 AI-Generated Test Fix (Optimized Workflow)
            
            This PR was automatically created using an optimized CI workflow.
            
            ### ⚡ Performance Improvements
            - Shared environment setup across jobs
            - Cached dependencies and Rails environment
            - Streamlined AI analysis with single API call
            - Reduced redundant test runs
            
            ### 🔍 Analysis Summary
            - **Branch:** \`${{ needs.create-branch.outputs.branch_name }}\`
            - **Generated:** ${new Date().toISOString()}
            
            ### 🧪 Next Steps
            1. Review the changes carefully
            2. Run tests locally to verify fixes
            3. Merge if appropriate
            
            *Generated by Optimized GitHub Actions AI Test Autofix System*`;
            
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              head: '${{ needs.create-branch.outputs.branch_name }}',
              base: 'main',
              body: body
            });
            
            console.log(`Created optimized AI autofix PR: ${pr.html_url}`);
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['🤖 ai-generated', 'autofix', 'optimized', 'needs-review']
            });
